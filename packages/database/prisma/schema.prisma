generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  
  ownedRooms      Room[]       @relation("RoomOwner")
  roomMemberships RoomMember[]
  messages        Message[]
}


model Room {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  password    String? 
  maxMembers  Int? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  ownerId String
  owner   User   @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members  RoomMember[]
  messages Message[]

  @@index([ownerId])
  @@index([isPrivate])
}


model RoomMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())
  role     RoomRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId]) 
  @@index([roomId])
  @@index([userId])
}


model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([authorId])
}


enum RoomRole {
  OWNER
  ADMIN
  MEMBER
}
